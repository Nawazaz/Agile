
Hardware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000262  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000291  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000029f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c12  00000000  00000000  000002df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  00000ef1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000329  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001978  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022e  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000250  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001e0  000001e0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.lcd_command 0000004c  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.lcd_data 0000004c  0000012a  0000012a  0000019e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.lcd_init 00000050  0000008e  0000008e  00000102  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.lcd_print 0000002c  00000176  00000176  000001ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 0000000e  00000080  00000080  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    00000028  000001a2  000001a2  00000216  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_fini 00000002  000001e8  000001e8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_funcs_on_exit 00000002  000001ea  000001ea  0000025e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_simulator_exit 00000002  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.exit    00000016  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._Exit   00000004  000001e4  000001e4  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   8:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
   c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  10:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  14:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  18:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  1c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  20:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  24:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  30:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  38:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  3c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  40:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  44:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  48:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  4c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  50:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  54:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  58:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  5c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  60:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000001e0 <__bad_interrupt>:
 1e0:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.lcd_command:

000000de <lcd_command>:
#define D7_PIN   PB5

// Function to send command to LCD
void lcd_command(unsigned char command) {
	// Set RS pin LOW for command mode
	PORTD &= ~(1 << RS_PIN);
  de:	9b b1       	in	r25, 0x0b	; 11
  e0:	9e 7f       	andi	r25, 0xFE	; 254
  e2:	9b b9       	out	0x0b, r25	; 11

	// Set EN pin HIGH
	PORTD |= (1 << EN_PIN);
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	92 60       	ori	r25, 0x02	; 2
  e8:	9b b9       	out	0x0b, r25	; 11

	// Send higher nibble
	PORTB = (PORTB & 0x0F) | (command & 0xF0);
  ea:	95 b1       	in	r25, 0x05	; 5
  ec:	9f 70       	andi	r25, 0x0F	; 15
  ee:	28 2f       	mov	r18, r24
  f0:	20 7f       	andi	r18, 0xF0	; 240
  f2:	92 2b       	or	r25, r18
  f4:	95 b9       	out	0x05, r25	; 5
	// Pulse EN pin
	PORTD &= ~(1 << EN_PIN);
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	9d 7f       	andi	r25, 0xFD	; 253
  fa:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	35 e0       	ldi	r19, 0x05	; 5
  fe:	3a 95       	dec	r19
 100:	f1 f7       	brne	.-4      	; 0xfe <lcd_command+0x20>
 102:	00 00       	nop
	_delay_us(1);

	// Send lower nibble
	PORTB = (PORTB & 0x0F) | ((command & 0x0F) << 4);
 104:	25 b1       	in	r18, 0x05	; 5
 106:	30 e1       	ldi	r19, 0x10	; 16
 108:	83 9f       	mul	r24, r19
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	92 2f       	mov	r25, r18
 110:	9f 70       	andi	r25, 0x0F	; 15
 112:	89 2b       	or	r24, r25
 114:	85 b9       	out	0x05, r24	; 5
	// Pulse EN pin
	PORTD &= ~(1 << EN_PIN);
 116:	8b b1       	in	r24, 0x0b	; 11
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	8f e8       	ldi	r24, 0x8F	; 143
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_command+0x42>
 124:	00 c0       	rjmp	.+0      	; 0x126 <lcd_command+0x48>
 126:	00 00       	nop
 128:	08 95       	ret

Disassembly of section .text.lcd_data:

0000012a <lcd_data>:
}

// Function to send data to LCD
void lcd_data(unsigned char data) {
	// Set RS pin HIGH for data mode
	PORTD |= (1 << RS_PIN);
 12a:	9b b1       	in	r25, 0x0b	; 11
 12c:	91 60       	ori	r25, 0x01	; 1
 12e:	9b b9       	out	0x0b, r25	; 11

	// Set EN pin HIGH
	PORTD |= (1 << EN_PIN);
 130:	9b b1       	in	r25, 0x0b	; 11
 132:	92 60       	ori	r25, 0x02	; 2
 134:	9b b9       	out	0x0b, r25	; 11

	// Send higher nibble
	PORTB = (PORTB & 0x0F) | (data & 0xF0);
 136:	95 b1       	in	r25, 0x05	; 5
 138:	9f 70       	andi	r25, 0x0F	; 15
 13a:	28 2f       	mov	r18, r24
 13c:	20 7f       	andi	r18, 0xF0	; 240
 13e:	92 2b       	or	r25, r18
 140:	95 b9       	out	0x05, r25	; 5
	// Pulse EN pin
	PORTD &= ~(1 << EN_PIN);
 142:	9b b1       	in	r25, 0x0b	; 11
 144:	9d 7f       	andi	r25, 0xFD	; 253
 146:	9b b9       	out	0x0b, r25	; 11
 148:	35 e0       	ldi	r19, 0x05	; 5
 14a:	3a 95       	dec	r19
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_data+0x20>
 14e:	00 00       	nop
	_delay_us(1);

	// Send lower nibble
	PORTB = (PORTB & 0x0F) | ((data & 0x0F) << 4);
 150:	25 b1       	in	r18, 0x05	; 5
 152:	30 e1       	ldi	r19, 0x10	; 16
 154:	83 9f       	mul	r24, r19
 156:	c0 01       	movw	r24, r0
 158:	11 24       	eor	r1, r1
 15a:	92 2f       	mov	r25, r18
 15c:	9f 70       	andi	r25, 0x0F	; 15
 15e:	89 2b       	or	r24, r25
 160:	85 b9       	out	0x05, r24	; 5
	// Pulse EN pin
	PORTD &= ~(1 << EN_PIN);
 162:	8b b1       	in	r24, 0x0b	; 11
 164:	8d 7f       	andi	r24, 0xFD	; 253
 166:	8b b9       	out	0x0b, r24	; 11
 168:	8f e8       	ldi	r24, 0x8F	; 143
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_data+0x42>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_data+0x48>
 172:	00 00       	nop
 174:	08 95       	ret

Disassembly of section .text.lcd_init:

0000008e <lcd_init>:

// Function to initialize LCD
// Function to initialize LCD
void lcd_init() {
	// Set data direction for LCD pins
	DDRB |= 0xF0;  // D4-D7
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	80 6f       	ori	r24, 0xF0	; 240
  92:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << RS_PIN) | (1 << EN_PIN);  // RS, EN
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	83 60       	ori	r24, 0x03	; 3
  98:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	80 e7       	ldi	r24, 0x70	; 112
  9e:	92 e0       	ldi	r25, 0x02	; 2
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <lcd_init+0x12>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <lcd_init+0x1c>
  aa:	00 00       	nop

	// Initial commands for LCD initialization
	_delay_ms(50);
	lcd_command(0x33);  // Initialize
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_command(0x32);  // Set to 4-bit mode
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_command(0x28);  // 2 lines, 5x8 font
  b8:	88 e2       	ldi	r24, 0x28	; 40
  ba:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_command(0x0C);  // Display on, cursor off, blinking off
  be:	8c e0       	ldi	r24, 0x0C	; 12
  c0:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_command(0x06);  // Increment cursor
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_command(0x01);  // Clear display
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
  d0:	8f e3       	ldi	r24, 0x3F	; 63
  d2:	9c e9       	ldi	r25, 0x9C	; 156
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_init+0x46>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_init+0x4c>
  da:	00 00       	nop
  dc:	08 95       	ret

Disassembly of section .text.lcd_print:

00000176 <lcd_print>:
	_delay_ms(10);      // Increase delay after clear display command
}


// Function to print a string on LCD
void lcd_print(const char* str) {
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	6b 01       	movw	r12, r22
 17e:	e8 2e       	mov	r14, r24
	while (*str) {
 180:	06 c0       	rjmp	.+12     	; 0x18e <lcd_print+0x18>
		lcd_data(*str++);
 182:	9f ef       	ldi	r25, 0xFF	; 255
 184:	c9 1a       	sub	r12, r25
 186:	d9 0a       	sbc	r13, r25
 188:	e9 0a       	sbc	r14, r25
 18a:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_data>
}


// Function to print a string on LCD
void lcd_print(const char* str) {
	while (*str) {
 18e:	f6 01       	movw	r30, r12
 190:	84 91       	lpm	r24, Z
 192:	e7 fc       	sbrc	r14, 7
 194:	80 81       	ld	r24, Z
 196:	81 11       	cpse	r24, r1
 198:	f4 cf       	rjmp	.-24     	; 0x182 <lcd_print+0xc>
		lcd_data(*str++);
	}
}
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	08 95       	ret

Disassembly of section .text.main:

000001a2 <main>:

int main() {
	// Initialize LCD
	lcd_init();
 1a2:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_init>

	// Display message
	lcd_command(0x80);  // Set cursor to line 1
 1a6:	80 e8       	ldi	r24, 0x80	; 128
 1a8:	0e 94 6f 00 	call	0xde	; 0xde <lcd_command>
	lcd_print("Hello, World!");
 1ac:	60 e8       	ldi	r22, 0x80	; 128
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_print>
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	83 ed       	ldi	r24, 0xD3	; 211
 1ba:	90 e3       	ldi	r25, 0x30	; 48
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x1a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x24>
 1c6:	00 00       	nop
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x26>

Disassembly of section .text.__dummy_fini:

000001e8 <_fini>:
 1e8:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000001ea <__funcs_on_exit>:
 1ea:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000001ec <__simulator_exit>:
 1ec:	08 95       	ret

Disassembly of section .text.exit:

000001ca <exit>:
 1ca:	ec 01       	movw	r28, r24
 1cc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__funcs_on_exit>
 1d0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_fini>
 1d4:	ce 01       	movw	r24, r28
 1d6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__simulator_exit>
 1da:	ce 01       	movw	r24, r28
 1dc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_Exit>

Disassembly of section .text._Exit:

000001e4 <_Exit>:
 1e4:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
